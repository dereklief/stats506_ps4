---
title: "STAT 506, PS 4"
format: html
editor: visual
---

GitHub Repository: <https://github.com/dereklief/stats506_ps4>

## **Problem 1 - Tidyverse**

Use the **tidyverse** for this problem. In particular, use piping and **dplyr** as much as you are able. **Note**: Use of any deprecated functions will result in a point loss.

Install and load the package [**nycflights13**](https://cran.r-project.org/package=nycflights13).

```{r}
library(nycflights13)
library(tidyverse)
library(dplyr)
airports <- airports
flights <- flights
```

a.  Generate a table (which can just be a nicely printed tibble) reporting the mean and median departure delay per airport. Generate a second table (which again can be a nicely printed tibble) reporting the mean and median arrival delay per airport. Exclude any destination with under 10 flights. Do this exclusion through code, not manually.

    Additionally,

    -   Order both tables in descending mean delay.

    -   Both tables should use the airport *names* not the airport *codes*.

    -   Both tables should print all rows.

Let's work on the first table - the one for mean and median departure delay per airport, first:

```{r}
flights %>% inner_join(airports, by = c("origin"="faa")) %>% 
  group_by(name) %>% 
  summarize(delay_mean=mean(dep_delay, na.rm=TRUE),
            delay_median=median(dep_delay, na.rm = TRUE)) %>%
  arrange(-delay_mean) %>%
  print()
```

Now the second table:

```{r}
flights %>% inner_join(airports, by = c("origin"="faa")) %>% 
  group_by(dest) %>% 
  filter(n() >= 10) %>%
  group_by(name) %>% 
  summarize(arr_mean=mean(arr_delay, na.rm=TRUE),
            arr_median=median(arr_delay, na.rm = TRUE)) %>%
  arrange(-arr_mean) %>%
  print()
```

b\. How many flights did the aircraft model with the fastest average speed take? Produce a tibble with 1 row, and entries for the model, average speed (in MPH) and number of flights.

```{r}
flights %>% inner_join(planes, by = c("tailnum")) %>% 
  group_by(model) %>%
  summarize(avg_speed = mean(speed, na.rm = TRUE),
            num_flights = n()) %>%
  arrange(-avg_speed) %>%
  filter(row_number()==1)
```

## **Problem 2 - `get_temp()`**

Use the **tidyverse** for this problem. In particular, use piping and **dplyr** as much as you are able. **Note**: Use of any deprecated functions will result in a point loss.

Load the Chicago NNMAPS data we used in the visualization lectures. Write a function `get_temp()` that allows a user to request the average temperature for a given month. The arguments should be:

-   `month`: Month, either a numeric 1-12 or a string.

-   `year`: A numeric year.

-   `data`: The data set to obtain data from.

-   `celsius`: Logically indicating whther the results should be in celsius. Default `FALSE`.

-   `average_fn`: A function with which to compute the mean. Default is `mean`.

The output should be a numeric vector of length 1. The code inside the function should, as with the rest of this problem, use the **tidyverse**. Be sure to sanitize the input.

Prove your code works by evaluating the following. Your code should produce the result, or a reasonable error message.

```{r}
get_temp("Apr", 1999, data = nnmaps)
get_temp("Apr", 1999, data = nnmaps, celsius = TRUE)
get_temp(10, 1998, data = nnmaps, average_fn = median)
get_temp(13, 1998, data = nnmaps)
get_temp(2, 2005, data = nnmaps)
get_temp("November", 1999, data =nnmaps, celsius = TRUE,
         average_fn = function(x) {
           x %>% sort -> x
           x[2:(length(x) - 1)] %>% mean %>% return
         })
```
